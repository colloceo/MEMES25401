{"ast":null,"code":"var _jsxFileName = \"C:\\\\MEMES254KE\\\\MEMES25401\\\\src\\\\components\\\\MemeGenerator.jsx\",\n  _s = $RefreshSig$();\n// src/components/MemeGenerator.jsx\nimport React, { useState, useEffect } from \"react\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemeGenerator = () => {\n  _s();\n  const [memeList, setMemeList] = useState([]);\n  const [randomMeme, setRandomMeme] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(response => response.json()).then(data => setMemeList(data.data.memes));\n  }, []);\n  const getRandomMeme = () => {\n    const randomIndex = Math.floor(Math.random() * memeList.length);\n    setRandomMeme(memeList[randomIndex].url);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"meme-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Meme Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Top Text\",\n        value: topText,\n        onChange: e => setTopText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Bottom Text\",\n        value: bottomText,\n        onChange: e => setBottomText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getRandomMeme,\n      children: \"Get Random Meme\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), randomMeme && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme-image\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: randomMeme,\n        alt: \"Meme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"top\",\n        children: topText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"bottom\",\n        children: bottomText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(MemeGenerator, \"1oPE0y3sq2IzZq92+dpXi3jAfcw=\");\n_c = MemeGenerator;\nexport default MemeGenerator;\nvar _c;\n$RefreshReg$(_c, \"MemeGenerator\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MemeGenerator","_s","memeList","setMemeList","randomMeme","setRandomMeme","topText","setTopText","bottomText","setBottomText","fetch","then","response","json","data","memes","getRandomMeme","randomIndex","Math","floor","random","length","url","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","src","alt","_c","$RefreshReg$"],"sources":["C:/MEMES254KE/MEMES25401/src/components/MemeGenerator.jsx"],"sourcesContent":["// src/components/MemeGenerator.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst MemeGenerator = () => {\r\n    const [memeList, setMemeList] = useState([]);\r\n    const [randomMeme, setRandomMeme] = useState(null);\r\n    const [topText, setTopText] = useState(\"\");\r\n    const [bottomText, setBottomText] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(data => setMemeList(data.data.memes));\r\n    }, []);\r\n\r\n    const getRandomMeme = () => {\r\n        const randomIndex = Math.floor(Math.random() * memeList.length);\r\n        setRandomMeme(memeList[randomIndex].url);\r\n    };\r\n\r\n    return (\r\n        <div className=\"meme-container\">\r\n            <h1>Meme Generator</h1>\r\n            <div className=\"input-field\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Top Text\"\r\n                    value={topText}\r\n                    onChange={(e) => setTopText(e.target.value)}\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Bottom Text\"\r\n                    value={bottomText}\r\n                    onChange={(e) => setBottomText(e.target.value)}\r\n                />\r\n            </div>\r\n            <button onClick={getRandomMeme}>Get Random Meme</button>\r\n            {randomMeme && (\r\n                <div className=\"meme-image\">\r\n                    <img src={randomMeme} alt=\"Meme\" />\r\n                    <h2 className=\"top\">{topText}</h2>\r\n                    <h2 className=\"bottom\">{bottomText}</h2>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MemeGenerator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}